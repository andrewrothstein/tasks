---
version: '3'
tasks:
  config-repositories:
    cmds:
      - clusterctl config repositories -o yaml
  ls-provider:
    internal: true
    vars:
      t: '{{ .t | default "Bootstrap" }}'
    cmds:
      - |
        clusterctl config repositories \
          -o yaml | yq -r '.[] | select(.ProviderType=="{{ .t }}Provider") | .Name'
  ls-bootstrap-providers:
    cmds:
      - task: ls-provider
        vars:
          t: Bootstrap
  ls-controlplane-providers:
    cmds:
      - task: ls-provider
        vars:
          t: ControlPlane
  ls-infrastructure-providers:
    cmds:
      - task: ls-provider
        vars:
          t: Infrastructure
  help:
    cmds:
      - clusterctl init --help
  init:
    vars:
      # bootstrap provider, e.g. kubeadm:v1.3.3
      b: '{{ .b }}'
      # control plane provider, e.g. kubeadm:v1.3.3
      c: '{{ .c }}'
      # infrastructure provider, e.g. vcluster:v0.1.3
      i: '{{ .i }}'
    cmds:
      - >-
        clusterctl
        init
        {{- if .b }} -b {{ .b | quote }}{{ end -}}
        {{- if .c }} -c {{ .c | quote }}{{ end -}}
        {{- if .i }} -i {{ .i | quote }}{{ end }}
  get-kubeconfig:
    vars:
      name: '{{ .name }}'
      kubeconfig: '{{ .kubeconfig | default "${HOME}/.kube/{{ .n }}-config" }}'
    cmds:
      - >-
        clusterctl
        get kubeconfig
        {{ .name }} > {{ .kubeconfig }}
  kk:
    vars:
      name: '{{ .name }}'
      kk: '{{ .kk }}'
    deps:
      - task: get-kubeconfig
        vars:
          name: '{{ .name }}'
    cmds:
      - export KUBECONFIG="~/.kube/{{ .name }}-config"
      - '{{ if .kk }}{{ .kk }}{{ end }}'
